# MYISM SOCIAL COUNCILOR V8: Deterministic Intervention Engine Prototype (Refined V1.1)
# Author: Inspired by U Ingar Soe (MYANMAR/BURMA), Refined by Grok
# Date: October 15, 2025
# Enhancements: Input validation, more candidates, better decomposition, multi-turn sim.
# Core: Implements ISM Sandwich Theorem (P * C -> R) with LMM_Γ optimization.

import numpy as np

class DeterministicInterventionEngine:
    def __init__(self, current_state):
        """
        Initialize with current Harmony state (0-10 scale per sub-var).
        Clamps values to [0,10] for validity.
        """
        self.current_state = self._validate_state(current_state)
        self.constraints = {
            'Poormanmeism': lambda a: a['cost'] == 0,
            'Internationalism': lambda a: True,  # Placeholder: All proto actions compliant
            'Universalism': lambda a: a['noharm'] == 1
        }
    
    def _validate_state(self, state):
        """Clamp sub-vars to [0,10]."""
        for comp in state:
            for sub, val in state[comp].items():
                state[comp][sub] = max(0, min(10, float(val)))
        return state
    
    def calculate_harmony(self, state=None):
        """Harmony(t) = 1/3 * (Intrinsic + External + Merit avg)."""
        if state is None:
            state = self.current_state
        intrinsic = np.mean(list(state['IntrinsicState'].values()))
        external = np.mean(list(state['ExternalFitness'].values()))
        merit = np.mean(list(state['MeritScore'].values()))
        return (intrinsic + external + merit) / 3
    
    def decompose_problem(self, P):
        """Duality Decomposition: Split into F_A (Internal) and F_B (External)."""
        internal_keywords = ['mood', 'energy', 'clarity', 'stress', 'anxiety', 'internal', 'mind']
        external_keywords = ['social', 'resource', 'environment', 'connection', 'external', 'people']
        
        words = P.lower().split()
        F_A = [w for w in words if w in internal_keywords]
        F_B = [w for w in words if w in external_keywords]
        
        F_A_desc = f"Internal: {' '.join(F_A) or 'General introspection'}"
        F_B_desc = f"External: {' '.join(F_B) or 'General relations/environment'}"
        
        return F_A_desc, F_B_desc
    
    def generate_candidates(self, F_A, F_B):
        """Generate/filtered candidates. Expanded for Merit focus."""
        candidates = [
            {
                'name': 'Meditate on breath (10 min)',
                'cost': 0, 'noharm': 1,
                'deltas': {
                    'IntrinsicState': {'Mood': 2.0, 'CognitiveClarity': 1.5, 'PhysicalEnergy': 0.5},
                    'ExternalFitness': {'ResourceBalance': 0, 'SocialCohesion': 0, 'EnvironmentalImpact': 0},
                    'MeritScore': {'ProSocialActions': 0.5, 'NoHarmCompliance': 1.0}
                }
            },
            {
                'name': 'Journal three gratitudes with Mettā intent',
                'cost': 0, 'noharm': 1,
                'deltas': {
                    'IntrinsicState': {'Mood': 1.5, 'CognitiveClarity': 2.0, 'PhysicalEnergy': 0},
                    'ExternalFitness': {'ResourceBalance': 0, 'SocialCohesion': 0.5, 'EnvironmentalImpact': 0},
                    'MeritScore': {'ProSocialActions': 1.5, 'NoHarmCompliance': 1.0}
                }
            },
            {
                'name': 'Mindful neighborhood walk (observe without disturbance)',
                'cost': 0, 'noharm': 1,
                'deltas': {
                    'IntrinsicState': {'Mood': 1.0, 'CognitiveClarity': 1.0, 'PhysicalEnergy': 2.0},
                    'ExternalFitness': {'ResourceBalance': 0, 'SocialCohesion': 0, 'EnvironmentalImpact': 1.0},
                    'MeritScore': {'ProSocialActions': 0.5, 'NoHarmCompliance': 1.0}
                }
            },
            {
                'name': 'Send a kind message to a friend (text/voice, no data cost assumed)',
                'cost': 0, 'noharm': 1,
                'deltas': {
                    'IntrinsicState': {'Mood': 2.0, 'CognitiveClarity': 0.5, 'PhysicalEnergy': 0},
                    'ExternalFitness': {'ResourceBalance': 0, 'SocialCohesion': 2.0, 'EnvironmentalImpact': 0},
                    'MeritScore': {'ProSocialActions': 2.0, 'NoHarmCompliance': 1.0}
                }
            },
            {
                'name': 'Visualize Mettā for all beings (5 min seated)',
                'cost': 0, 'noharm': 1,
                'deltas': {
                    'IntrinsicState': {'Mood': 1.5, 'CognitiveClarity': 1.0, 'PhysicalEnergy': 0.5},
                    'ExternalFitness': {'ResourceBalance': 0, 'SocialCohesion': 1.0, 'EnvironmentalImpact': 0.5},
                    'MeritScore': {'ProSocialActions': 2.5, 'NoHarmCompliance': 1.0}
                }
            },
            # Invalid example
            {
                'name': 'Buy motivational book',
                'cost': 15, 'noharm': 1,
                'deltas': {
                    'IntrinsicState': {'Mood': 1.0, 'CognitiveClarity': 2.0, 'PhysicalEnergy': 0},
                    'ExternalFitness': {'ResourceBalance': -2.0, 'SocialCohesion': 0, 'EnvironmentalImpact': -0.5},
                    'MeritScore': {'ProSocialActions': 0, 'NoHarmCompliance': 0.5}
                }
            }
        ]
        # Tailor loosely: Prioritize internal actions if F_A emphasized (for proto)
        if 'introspection' in F_A.lower():
            candidates = [a for a in candidates if 'Meditate' in a['name'] or 'Journal' in a['name']] + [candidates[-1]]  # Include invalid for demo
        return candidates
    
    def filter_candidates(self, candidates):
        """C-Vector: All constraints must pass."""
        return [a for a in candidates if all(c(a) for c in self.constraints.values())]
    
    def optimize_action(self, filtered):
        """argmax ΔHarmony (sum of component avgs)."""
        if not filtered:
            return None, "No actions satisfy C. Default: Breathe deeply (universal baseline)."
        
        best_a, max_delta = max(filtered, key=lambda a: sum(
            np.mean(list(a['deltas'][comp].values())) for comp in self.current_state
        ), key=lambda a: sum(np.mean(list(a['deltas'][comp].values())) for comp in self.current_state)
        
        total_delta = sum(np.mean(list(a['deltas'][comp].values())) for comp in self.current_state for a in [best_a])
        return best_a, f"Max ∇_t Harmony: {total_delta / 3:.2f}"
    
    def run_engine(self, P, num_turns=1):
        """Full ISM flow. Simulate multi-turn if >1."""
        current = self.current_state
        for turn in range(num_turns):
            F_A, F_B = self.decompose_problem(P)
            candidates = self.generate_candidates(F_A, F_B)
            filtered = self.filter_candidates(candidates)
            best_a, message = self.optimize_action(filtered)
            
            print(f"\n--- Turn {turn+1} ---")
            print(f"Problem: {P}")
            print(f"Duality: {F_A} | {F_B}")
            print(f"Filtered: {len(filtered)} candidates")
            
            if best_a:
                print(f"Action: {best_a['name']}")
                print(message)
                # Update state
                for comp in current:
                    for sub, delta in best_a['deltas'][comp].items():
                        if sub in current[comp]:
                            current[comp][sub] += delta
                self.current_state = self._validate_state(current)
                h_old = self.calculate_harmony({k: {sk: sv - best_a['deltas'][k].get(sk, 0) for sk, sv in v.items()} for k, v in current.items()})
                h_new = self.calculate_harmony()
                print(f"Harmony: {h_old:.2f} → {h_new:.2f}")
            else:
                print(message)
            P = input("Next problem (or Enter to stop): ").strip()  # Interactive
            if not P:
                break

# Demo
if __name__ == "__main__":
    state = {
        'IntrinsicState': {'Mood': 4.0, 'CognitiveClarity': 5.0, 'PhysicalEnergy': 6.0},
        'ExternalFitness': {'ResourceBalance': 3.0, 'SocialCohesion': 4.0, 'EnvironmentalImpact': 5.0},
        'MeritScore': {'ProSocialActions': 7.0, 'NoHarmCompliance': 8.0}
    }
    engine = DeterministicInterventionEngine(state)
    P = "Stagnant mood and low social energy."
    engine.run_engine(P, num_turns=3)  # Sim 3 turns; interactive after first
